#include<bits/stdc++.h>
using namespace std;

int n,m,s,t,cas,u,v,w,c;
int risidual_graph[101][101],parent[101];

bool bfs()
{
    bool visited[n+1];
    memset(visited,0,sizeof visited);
    queue<int>q;
    q.push(s);
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        for(int i=0;i<=n;i++)
        {
            if(!visited[i]&&risidual_graph[u][i]>0)
            {
                visited[i]=1;
                parent[i]=u;
                q.push(i);
            }
        }
    }
    return visited[t];
}

int fordFulkerson()
{
    parent[s]=-1;
    int max_flow=0;
    while(bfs())
    {
        int temp_flow=INT_MAX;
        for(u=t;u!=s;u=parent[u])
        {
            v=parent[u];
            temp_flow=min(temp_flow,risidual_graph[v][u]);
        }
        for(u=t;u!=s;u=parent[u])
        {
            v=parent[u];
            risidual_graph[v][u]-=temp_flow;
            risidual_graph[u][v]+=temp_flow;
        }
        max_flow+=temp_flow;
    }
    return max_flow;
}

int main()
{
    while(scanf("%d",&n)&&n)
    {
        cas++;
        scanf("%d%d%d",&s,&t,&c);
        memset(risidual_graph,0,sizeof risidual_graph);
        for(int i=0;i<c;i++)
        {
            scanf("%d%d%d",&u,&v,&w);
            risidual_graph[u][v]+=w;
            risidual_graph[v][u]+=w;
        }
        int x=fordFulkerson();
        printf("Network %d\nThe bandwidth is %d.\n\n",cas,x);
    }
    return 0;
}
